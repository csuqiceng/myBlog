{"version":3,"sources":["logo.svg","login/login.js","Page/main.js","App.js","serviceWorker.js","index.js","image/11.jpg"],"names":["module","exports","Login","Form","Item","inpVal","this","input","state","value","alert","props","onLoginCallback","console","log","defaultValue","ref","size","prefix","type","style","color","placeholder","htmlType","className","onClick","search","bind","React","Component","WrapForm","create","Main","visible","showModal","setState","handleOk","e","handleCancel","title","onOk","onCancel","src","image","App","flag","logo","alt","LoginCallback","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2FAAAA,EAAOC,QAAU,IAA0B,kC,4RCIrCC,GADWC,IAAKC,K,YAElB,aAAc,uE,sEAIV,IAAMC,EAASC,KAAKC,MAAMC,MAAMC,MACnB,MAAVJ,IACCK,MAAM,4BACNJ,KAAKK,MAAMC,iBAAgB,IAE/BC,QAAQC,IAAIT,K,+BAEN,IAAD,OAEL,OACI,6BACA,kBAAC,IAAD,CAAOU,aAAa,GAAGC,IAAK,SAAAT,GAAK,OAAI,EAAKA,MAAQA,GAAOU,KAAK,QAASC,OAAQ,kBAAC,IAAD,CAAMC,KAAK,OAAQC,MAAO,CAAEC,MAAO,oBAAyBC,YAAY,yCACvJ,kBAAC,IAAD,CAAQL,KAAK,QAASE,KAAK,UAAUI,SAAS,SAASC,UAAU,oBAAqBC,QAASnB,KAAKoB,OAAOC,KAAKrB,OAAhH,sB,GAjBQsB,IAAMC,YAwBTC,EADA3B,IAAK4B,QAAL5B,CAAcD,G,SCkBhB8B,E,2MAzCXxB,MAAQ,CAAEyB,SAAS,G,EAEnBC,UAAY,WACV,EAAKC,SAAS,CACZF,SAAS,K,EAIbG,SAAW,SAAAC,GACTxB,QAAQC,IAAIuB,GACZ,EAAKF,SAAS,CACZF,SAAS,K,EAIbK,aAAe,SAAAD,GACbxB,QAAQC,IAAIuB,GACZ,EAAKF,SAAS,CACZF,SAAS,K,wEAKX,OACE,6BACE,kBAAC,IAAD,CAAQd,KAAK,UAAUM,QAASnB,KAAK4B,WAArC,cAGA,kBAAC,IAAD,CACEK,MAAM,cACNN,QAAS3B,KAAKE,MAAMyB,QACpBO,KAAMlC,KAAK8B,SACXK,SAAUnC,KAAKgC,cAEd,yBAAKI,IAAKC,Y,GAnCJf,IAAMC,WCsCVe,E,YAjCb,aAAc,IAAD,8BACT,+CACKpC,MAAM,CACTqC,MAAK,GAHE,E,2EAMCR,GACV/B,KAAK6B,SAAS,CACZU,MAAK,M,+BAMT,OAAIvC,KAAKE,MAAMqC,KAWX,kBAAC,EAAD,MATA,yBAAKrB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKkB,IAAKI,IAAMtB,UAAU,WAAWuB,IAAI,SACzC,kBAAC,EAAD,CAAOnC,gBAAiBN,KAAK0C,cAAcrB,KAAKrB,c,GApB1CsB,IAAMC,WCKJoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBErInB/D,EAAOC,QAAU,IAA0B,iC","file":"static/js/main.d03a5dea.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport Button from 'antd/es/button';\r\nimport {message,Form, Icon, Input,Alert} from 'antd';\r\nconst FormItem = Form.Item;\r\nclass Login extends React.Component {\r\n    constructor(){\r\n        super();\r\n    }\r\n    search(){\r\n        const inpVal = this.input.state.value;\r\n        if(inpVal ==='1'){\r\n            alert(\"生日快乐\")\r\n            this.props.onLoginCallback(true);\r\n        }\r\n        console.log(inpVal);\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n            <Input defaultValue='' ref={input => this.input = input} size=\"large\"  prefix={<Icon type=\"user\"  style={{ color: 'rgba(0,0,0,.5)' }}  />} placeholder=\"请输入用户名\"  />\r\n            <Button size=\"large\"  type=\"primary\" htmlType=\"submit\" className=\"login-form-button\"  onClick={this.search.bind(this)}> 登陆</Button>\r\n            </div>\r\n            );\r\n    }\r\n  }\r\n\r\n  let WrapForm = Form.create()(Login)\r\n  export default WrapForm","import React from 'react';\r\nimport image from '../image/11.jpg';\r\nimport {Modal,Button} from 'antd';\r\nclass Main extends React.Component {\r\n    state = { visible: false };\r\n  \r\n    showModal = () => {\r\n      this.setState({\r\n        visible: true,\r\n      });\r\n    };\r\n  \r\n    handleOk = e => {\r\n      console.log(e);\r\n      this.setState({\r\n        visible: false,\r\n      });\r\n    };\r\n  \r\n    handleCancel = e => {\r\n      console.log(e);\r\n      this.setState({\r\n        visible: false,\r\n      });\r\n    };\r\n  \r\n    render() {\r\n      return (\r\n        <div>\r\n          <Button type=\"primary\" onClick={this.showModal}>\r\n            Open Modal\r\n          </Button>\r\n          <Modal\r\n            title=\"Basic Modal\"\r\n            visible={this.state.visible}\r\n            onOk={this.handleOk}\r\n            onCancel={this.handleCancel}\r\n          >\r\n             <img src={image}></img>\r\n          </Modal>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\nexport default Main;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport image from './image/11.jpg';\nimport './App.css';\nimport Login from './login/login';\n// import Page1 from './Page/page1';\nimport Main from './Page/main';\nclass App extends React.Component {\n  constructor(){\n      super();\n      this.state={\n        flag:false\n      }\n  }\n  LoginCallback(e){\n      this.setState({\n        flag:true\n      })\n  }\n  \n\n  render() {\n    if(!this.state.flag){\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <Login onLoginCallback={this.LoginCallback.bind(this)}></Login>\n          </header>\n        </div>\n      );\n    }else{\n      return (\n        <Main></Main>\n        // <Page1></Page1>\n        // <img src={image}></img>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/11.35795360.jpg\";"],"sourceRoot":""}