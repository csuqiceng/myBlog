{"version":3,"sources":["logo.svg","components/login/loginForm.js","components/login/login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","FormItem","Form","Item","NormalLoginForm","e","preventDefault","data","this","props","form","getFieldsValue","name","password","localStorage","setItem","alert","message","error","getFieldDecorator","window","innerHeight","innerWidth","className","onSubmit","handleSubmit","rules","required","initialValue","size","prefix","type","style","color","placeholder","trigger","htmlType","React","Component","WrapForm","create","App","src","logo","alt","href","target","rel","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2FAAAA,EAAOC,QAAU,IAA0B,kC,8RCerCC,EAAWC,IAAKC,KAChBC,E,YACF,aAAc,uE,wHAMDC,GACTA,EAAEC,iBACF,IAAIC,EAAOC,KAAKC,MAAMC,KAAKC,iBAKN,gBAAdJ,EAAKK,MAA0C,gBAAhBL,EAAKM,UACnCC,aAAaC,QAAQ,WAAWR,EAAKK,MACrCI,MAAM,6BAINC,IAAQC,MAAM,sD,+BAIhB,IAAD,OAIEC,GAHGC,OAAOC,YACND,OAAOE,WACJd,KAAKS,QACST,KAAKC,MAAMC,KAAhCS,mBACP,OACI,yBAAKI,UAAU,cACX,kBAAC,IAAD,CAAMC,SAAU,SAACnB,GAAD,OAAK,EAAKoB,aAAapB,IAAIkB,UAAU,aACjD,wDACA,kBAACtB,EAAD,KAEQkB,EACI,OAAO,CACHO,MAAM,CAAC,CAACC,UAAU,EAAMV,QAAQ,qDAChCW,aAAc,eAHtBT,CAMI,kBAAC,IAAD,CAAOU,KAAK,QAASC,OAAQ,kBAAC,IAAD,CAAMC,KAAK,OAAQC,MAAO,CAAEC,MAAO,oBAAyBC,YAAY,2CAIjH,kBAACjC,EAAD,KAEQkB,EACI,WAAW,CACPO,MAAM,CAAC,CAACC,UAAU,EAAMV,QAAQ,6CAAUkB,QAAQ,SAClDP,aAAc,eAHtBT,CAMI,kBAAC,IAAD,CAAOU,KAAK,QAASC,OAAQ,kBAAC,IAAD,CAAMC,KAAK,OAAOC,MAAO,CAAEC,MAAO,oBAAwBF,KAAK,WAAWG,YAAY,qCAI/H,kBAACjC,EAAD,KACA,kBAAC,IAAD,CAAQ4B,KAAK,QAASE,KAAK,UAAUK,SAAS,SAASb,UAAU,qBAAjE,iBAIA,oFACA,mD,GA/DUc,IAAMC,WA4ErBC,EAHArC,IAAKsC,QAALtC,CAAcE,GCtFNkC,YC0BRG,MAzBf,WACE,OAEE,yBAAKlB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKmB,IAAKC,IAAMpB,UAAU,WAAWqB,IAAI,SAEzC,mCACO,4CADP,wBAGA,uBACErB,UAAU,WACVsB,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,kBCFYC,QACW,cAA7B5B,OAAO6B,SAASC,UAEe,UAA7B9B,OAAO6B,SAASC,UAEhB9B,OAAO6B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.793bb246.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","/**\r\n * Created by liulinqiang on 2018/7/3.\r\n */\r\n \r\nimport React from \"react\"\r\nimport axios from \"axios\"\r\n// import PropTypes from \"proptypes\"\r\n//import '../data/user'\r\nimport { message,Form, Icon, Input, Button, Checkbox, Alert} from 'antd';\r\n// import { isAbsolute } from \"path\";\r\n// import {Provider,connect} from 'react-redux'\r\n// import store from '../../redux/store'\r\n// require('../../styles/login.scss')\r\n// require('../mock/mock')\r\n \r\nconst FormItem = Form.Item;\r\nclass NormalLoginForm extends React.Component {\r\n    constructor(){\r\n        super();\r\n    }\r\n    componentWillMount() {\r\n\r\n    }\r\n    handleSubmit(e){\r\n        e.preventDefault();\r\n        let data = this.props.form.getFieldsValue()\r\n        // let history = this.context.router.history\r\n        \r\n        // axios.post(\"/users\",data).then((res) =>{\r\n        //     let resMsg = res.data;\r\n            if(data.name === \"liulinqiang\" && data.password===\"liulinqiang\"){\r\n                localStorage.setItem('username',data.name)\r\n                alert(\"登录成功\")\r\n                // store.dispatch({type:'login',username:data.name})\r\n                // history.push('index');\r\n            }else{\r\n                message.error('用户或密码不正确')\r\n            }\r\n        // })\r\n    }\r\n    render() {\r\n        let top = window.innerHeight/2;\r\n        let left = window.innerWidth/2; \r\n        let message = this.message\r\n        const {getFieldDecorator} = this.props.form;\r\n        return (\r\n            <div className=\"login-wrap\">\r\n                <Form onSubmit={(e)=>this.handleSubmit(e)} className=\"loginForm\">\r\n                    <h5>用户登陆</h5>\r\n                    <FormItem>\r\n                        {\r\n                            getFieldDecorator(\r\n                                'name',{\r\n                                    rules:[{required: true, message:'用户名不能为空！'}],\r\n                                    initialValue: 'liulinqiang'\r\n                                }\r\n                            )(\r\n                                <Input size=\"large\"  prefix={<Icon type=\"user\"  style={{ color: 'rgba(0,0,0,.5)' }}  />} placeholder=\"请输入用户名\"  />\r\n                            )\r\n                        }\r\n                    </FormItem>\r\n                    <FormItem>\r\n                        {\r\n                            getFieldDecorator(\r\n                                \"password\",{\r\n                                    rules:[{required: true, message:\"密码不能为空！\",trigger:'blur'}],\r\n                                    initialValue: 'liulinqiang'\r\n                                }\r\n                            )(\r\n                                <Input size=\"large\"  prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.5)' }} />} type=\"password\" placeholder=\"请输入密码\" />\r\n                            )\r\n                        }\r\n                    </FormItem>\r\n                    <FormItem>\r\n                    <Button size=\"large\"  type=\"primary\" htmlType=\"submit\" className=\"login-form-button\" >\r\n                            登陆\r\n                        </Button>\r\n                    </FormItem>\r\n                    <p>用React仿建的催收系统</p>\r\n                    <p>By LiulinQiang</p>\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\n// NormalLoginForm.contextTypes = {\r\n//     router: PropTypes.object.isRequired\r\n// };\r\nlet WrapForm = Form.create()(NormalLoginForm)\r\n\r\n// const WrapForms  = connect()(WrapForm)\r\nexport default WrapForm","import React,{Component} from \"react\"\r\nimport { Form, Icon, Input, Button, Checkbox,Layout} from 'antd';\r\nimport LoginForm from './loginForm'\r\nclass LoginApp extends Component {\r\n    componentWillMount() {\r\n    }\r\n    render() {\r\n        var innerHeight = window.innerHeight;\r\n        return (   \r\n                <LoginForm store={this.props.store}></LoginForm>\r\n        )\r\n    }\r\n}\r\nexport default LoginApp","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport LoginApp from './components/login/login';\nfunction App() {\n  return (\n    // <Provider store = {store}>\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        {/* <LoginApp store=\"ssss\"></LoginApp> */}\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n      \n    </div>\n    // </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}